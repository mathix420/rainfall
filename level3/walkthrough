1. Le but est assez clair, acceder au call `system("/bin/sh")`
2. On remarque egalement la mauvaise utilisation de `printf` qui est vulnerable
3. Notre but est donc d'override la valeur de l'object `m (ds:0x804988c)`
4. L'option `%n` de printf peut nous aider a ecrire a une addresse precise
5. Il faut maintenant trouver l'addresse de notre object sur la stack afin d'ecrire dessus
6. En essayant de lire le contenu de la stack afin d'y trouver notre adresse on s'appersoit qu'un pattern apparait
   ```
   python -c 'print "%x " * 1000' | ./level3

   [...] 78252078 20782520 25207825 [...]
   ```
7. En les decodant on remarque que c'est simplement les parametres de printf que l'on vient d'ecrire
   ```
   python -c 'print "20782520".decode("hex")'

   " x% "
   ```
8. Il suffit donc de mettre l'addresse desirer dans l'entree afin de la voir apparaitre sur la stack
9. En ecrivant le payload on touve l'addresse desiree a la 5e position
10. Maintenant en utilisant l'argument '%n' on peut override le contenu de l'addresse.
11. En trouvant le bon padding on arrive a override `m` avec `0x40`

```
(/tmp/exp.py; echo "cat /home/user/level4/.pass") | ./level3
```

> Flag: b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa